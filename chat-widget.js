// Chat Widget JavaScript
class ChatWidget {
  constructor() {
    this.isOpen = false;
    this.isTyping = false;
    this.messages = [];
    this.init();
  }

  init() {
    this.createWidget();
    this.bindEvents();
    this.addWelcomeMessage();
  }

  createWidget() {
    // Create chat widget HTML
    const chatHTML = `
      <div class="chat-widget">
        <div class="chat-bubble" id="chatBubble">
          <span class="chat-icon">üí¨</span>
        </div>
        <div class="chat-window" id="chatWindow">
          <div class="chat-header">
            <div class="chat-header-info">
              <div class="chat-avatar">ü§ñ</div>
              <div>
                <h3 class="chat-title">AI Assistant</h3>
                <p class="chat-subtitle">S·∫µn s√†ng h·ªó tr·ª£ b·∫°n</p>
              </div>
            </div>
            <button class="chat-close" id="chatClose">√ó</button>
          </div>
          <div class="chat-messages" id="chatMessages">
            <div class="chat-welcome">
              <span class="chat-welcome-icon">üëã</span>
              <p>Xin ch√†o! T√¥i l√† AI Assistant c·ªßa iView NEU. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:</p>
              <ul style="text-align: left; margin-top: 10px; padding-left: 20px;">
                <li>H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng h·ªá th·ªëng</li>
                <li>Gi·∫£i ƒë√°p th·∫Øc m·∫Øc v·ªÅ ph·ªèng v·∫•n</li>
                <li>G·ª£i √Ω c√¢u h·ªèi luy·ªán t·∫≠p</li>
                <li>H·ªó tr·ª£ k·ªπ thu·∫≠t</li>
              </ul>
            </div>
          </div>
          <div class="chat-input-container">
            <div class="chat-input-wrapper">
              <textarea 
                class="chat-input" 
                id="chatInput" 
                placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..."
                rows="1"
              ></textarea>
              <button class="chat-send" id="chatSend">
                <span>‚û§</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    `;

    // Add to body
    document.body.insertAdjacentHTML('beforeend', chatHTML);
  }

  bindEvents() {
    const chatBubble = document.getElementById('chatBubble');
    const chatWindow = document.getElementById('chatWindow');
    const chatClose = document.getElementById('chatClose');
    const chatInput = document.getElementById('chatInput');
    const chatSend = document.getElementById('chatSend');

    // Toggle chat window
    chatBubble.addEventListener('click', () => {
      this.toggleChat();
    });

    // Close chat
    chatClose.addEventListener('click', () => {
      this.closeChat();
    });

    // Send message
    chatSend.addEventListener('click', () => {
      this.sendMessage();
    });

    // Send on Enter (but allow Shift+Enter for new line)
    chatInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        this.sendMessage();
      }
    });

    // Auto-resize textarea
    chatInput.addEventListener('input', () => {
      this.autoResizeTextarea(chatInput);
    });

    // Close on outside click
    document.addEventListener('click', (e) => {
      if (this.isOpen && !e.target.closest('.chat-widget')) {
        this.closeChat();
      }
    });
  }

  toggleChat() {
    if (this.isOpen) {
      this.closeChat();
    } else {
      this.openChat();
    }
  }

  openChat() {
    const chatWindow = document.getElementById('chatWindow');
    const chatBubble = document.getElementById('chatBubble');
    
    chatWindow.classList.add('active');
    chatBubble.style.transform = 'scale(0.9)';
    this.isOpen = true;
    
    // Focus input after animation
    setTimeout(() => {
      document.getElementById('chatInput').focus();
    }, 300);
  }

  closeChat() {
    const chatWindow = document.getElementById('chatWindow');
    const chatBubble = document.getElementById('chatBubble');
    
    chatWindow.classList.remove('active');
    chatBubble.style.transform = 'scale(1)';
    this.isOpen = false;
  }

  sendMessage() {
    const chatInput = document.getElementById('chatInput');
    const message = chatInput.value.trim();
    
    if (!message) return;

    // Add user message
    this.addMessage(message, 'user');
    chatInput.value = '';
    this.autoResizeTextarea(chatInput);

    // Show typing indicator
    this.showTypingIndicator();

    // Simulate AI response
    setTimeout(() => {
      this.hideTypingIndicator();
      this.generateAIResponse(message);
    }, 1000 + Math.random() * 2000);
  }

  addMessage(content, sender) {
    const chatMessages = document.getElementById('chatMessages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `chat-message ${sender}`;
    
    const avatar = sender === 'ai' ? 'ü§ñ' : 'üë§';
    const avatarClass = sender === 'ai' ? 'ai' : 'user';
    
    messageDiv.innerHTML = `
      <div class="chat-message-avatar ${avatarClass}">${avatar}</div>
      <div class="chat-message-content">${this.formatMessage(content)}</div>
    `;
    
    chatMessages.appendChild(messageDiv);
    this.scrollToBottom();
    
    // Store message
    this.messages.push({ content, sender, timestamp: new Date() });
  }

  showTypingIndicator() {
    const chatMessages = document.getElementById('chatMessages');
    const typingDiv = document.createElement('div');
    typingDiv.className = 'chat-message ai';
    typingDiv.id = 'typingIndicator';
    
    typingDiv.innerHTML = `
      <div class="chat-message-avatar ai">ü§ñ</div>
      <div class="chat-typing">
        <div class="chat-typing-dots">
          <div class="chat-typing-dot"></div>
          <div class="chat-typing-dot"></div>
          <div class="chat-typing-dot"></div>
        </div>
      </div>
    `;
    
    chatMessages.appendChild(typingDiv);
    this.scrollToBottom();
    this.isTyping = true;
  }

  hideTypingIndicator() {
    const typingIndicator = document.getElementById('typingIndicator');
    if (typingIndicator) {
      typingIndicator.remove();
    }
    this.isTyping = false;
  }

  generateAIResponse(userMessage) {
    const responses = this.getAIResponses(userMessage);
    const response = responses[Math.floor(Math.random() * responses.length)];
    this.addMessage(response, 'ai');
  }

  getAIResponses(userMessage) {
    const message = userMessage.toLowerCase();
    
    // Greeting responses
    if (message.includes('xin ch√†o') || message.includes('hello') || message.includes('hi')) {
      return [
        'Xin ch√†o! T√¥i r·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n. B·∫°n c·∫ßn gi√∫p g√¨ v·ªÅ h·ªá th·ªëng iView NEU?',
        'Ch√†o b·∫°n! T√¥i l√† AI Assistant c·ªßa iView NEU. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi c√°c c√¢u h·ªèi v·ªÅ ph·ªèng v·∫•n v√† luy·ªán t·∫≠p.',
        'Hello! T√¥i s·∫µn s√†ng h·ªó tr·ª£ b·∫°n. H√£y cho t√¥i bi·∫øt b·∫°n mu·ªën t√¨m hi·ªÉu g√¨ nh√©!'
      ];
    }
    
    // Interview related
    if (message.includes('ph·ªèng v·∫•n') || message.includes('interview')) {
      return [
        'ƒê·ªÉ chu·∫©n b·ªã t·ªët cho ph·ªèng v·∫•n, b·∫°n n√™n: 1) Nghi√™n c·ª©u k·ªπ v·ªÅ c√¥ng ty/v·ªã tr√≠, 2) Chu·∫©n b·ªã CV v√† portfolio, 3) Luy·ªán t·∫≠p tr·∫£ l·ªùi c√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p, 4) Chu·∫©n b·ªã c√¢u h·ªèi cho nh√† tuy·ªÉn d·ª•ng.',
        'H·ªá th·ªëng iView NEU c√≥ th·ªÉ gi√∫p b·∫°n luy·ªán t·∫≠p ph·ªèng v·∫•n v·ªõi AI. B·∫°n c√≥ th·ªÉ t·∫°o phi√™n ph·ªèng v·∫•n vi·ªác l√†m ho·∫∑c thi v·∫•n ƒë√°p m√¥n h·ªçc.',
        'M·ªôt s·ªë c√¢u h·ªèi ph·ªèng v·∫•n th∆∞·ªùng g·∫∑p: "H√£y gi·ªõi thi·ªáu v·ªÅ b·∫£n th√¢n", "T·∫°i sao b·∫°n mu·ªën l√†m vi·ªác ·ªü ƒë√¢y?", "ƒêi·ªÉm m·∫°nh/y·∫øu c·ªßa b·∫°n l√† g√¨?". B·∫°n mu·ªën luy·ªán t·∫≠p c√¢u n√†o?'
      ];
    }
    
    // Academic related
    if (message.includes('thi') || message.includes('v·∫•n ƒë√°p') || message.includes('m√¥n h·ªçc')) {
      return [
        'ƒê·ªÉ thi v·∫•n ƒë√°p hi·ªáu qu·∫£: 1) √în t·∫≠p k·ªπ l√Ω thuy·∫øt, 2) Chu·∫©n b·ªã v√≠ d·ª• th·ª±c t·∫ø, 3) Luy·ªán t·∫≠p tr√¨nh b√†y r√µ r√†ng, 4) Chu·∫©n b·ªã c√¢u h·ªèi m·ªü r·ªông. B·∫°n ƒëang √¥n m√¥n n√†o?',
        'H·ªá th·ªëng c√≥ th·ªÉ t·∫°o c√¢u h·ªèi v·∫•n ƒë√°p theo m√¥n h·ªçc c·ªßa b·∫°n. B·∫°n ch·ªâ c·∫ßn upload gi√°o tr√¨nh v√† b·∫£ng ƒëi·ªÉm ƒë·ªÉ AI t·∫°o c√¢u h·ªèi ph√π h·ª£p.',
        'M·ªôt s·ªë m√¥n h·ªçc ph·ªï bi·∫øn: Kinh t·∫ø vi m√¥, T√†i ch√≠nh doanh nghi·ªáp, Kinh t·∫ø l∆∞·ª£ng, Tri·∫øt h·ªçc M√°c-L√™nin. B·∫°n mu·ªën luy·ªán t·∫≠p m√¥n n√†o?'
      ];
    }
    
    // Technical support
    if (message.includes('l·ªói') || message.includes('kh√¥ng ho·∫°t ƒë·ªông') || message.includes('help')) {
      return [
        'N·∫øu g·∫∑p l·ªói k·ªπ thu·∫≠t, b·∫°n c√≥ th·ªÉ: 1) Refresh trang, 2) Ki·ªÉm tra k·∫øt n·ªëi internet, 3) Th·ª≠ tr√¨nh duy·ªát kh√°c, 4) Li√™n h·ªá support@neu.edu.vn',
        'T√¥i c√≥ th·ªÉ h∆∞·ªõng d·∫´n b·∫°n s·ª≠ d·ª•ng c√°c t√≠nh nƒÉng c·ªßa h·ªá th·ªëng. B·∫°n g·∫∑p v·∫•n ƒë·ªÅ g√¨ c·ª• th·ªÉ?',
        'ƒê·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t, h√£y m√¥ t·∫£ chi ti·∫øt v·∫•n ƒë·ªÅ b·∫°n ƒëang g·∫∑p ph·∫£i.'
      ];
    }
    
    // Default responses
    return [
      'C·∫£m ∆°n b·∫°n ƒë√£ h·ªèi! T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi c√°c v·∫•n ƒë·ªÅ v·ªÅ ph·ªèng v·∫•n, thi v·∫•n ƒë√°p, ho·∫∑c s·ª≠ d·ª•ng h·ªá th·ªëng iView NEU. B·∫°n mu·ªën t√¨m hi·ªÉu g√¨?',
      'T√¥i hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ th·ª≠: 1) T·∫°o phi√™n ph·ªèng v·∫•n m·ªõi, 2) Xem l·ªãch s·ª≠ luy·ªán t·∫≠p, 3) Ki·ªÉm tra dashboard c√° nh√¢n. C·∫ßn h·ªó tr·ª£ g√¨ th√™m?',
      'ƒê√≥ l√† m·ªôt c√¢u h·ªèi hay! T√¥i khuy√™n b·∫°n n√™n s·ª≠ d·ª•ng t√≠nh nƒÉng luy·ªán t·∫≠p c·ªßa h·ªá th·ªëng ƒë·ªÉ c·∫£i thi·ªán k·ªπ nƒÉng. B·∫°n c√≥ mu·ªën t√¥i h∆∞·ªõng d·∫´n c√°ch s·ª≠ d·ª•ng kh√¥ng?',
      'T√¥i c√≥ th·ªÉ gi√∫p b·∫°n hi·ªÉu r√µ h∆°n v·ªÅ h·ªá th·ªëng iView NEU. B·∫°n quan t√¢m ƒë·∫øn t√≠nh nƒÉng n√†o: ph·ªèng v·∫•n vi·ªác l√†m hay thi v·∫•n ƒë√°p m√¥n h·ªçc?'
    ];
  }

  formatMessage(content) {
    // Simple formatting for better readability
    return content
      .replace(/\n/g, '<br>')
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>');
  }

  autoResizeTextarea(textarea) {
    textarea.style.height = 'auto';
    textarea.style.height = Math.min(textarea.scrollHeight, 100) + 'px';
  }

  scrollToBottom() {
    const chatMessages = document.getElementById('chatMessages');
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }

  addWelcomeMessage() {
    // Add some sample messages to make it look more realistic
    setTimeout(() => {
      if (this.messages.length === 0) {
        this.addMessage('Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n h√¥m nay?', 'ai');
      }
    }, 2000);
  }
}

// Initialize chat widget when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  new ChatWidget();
});
